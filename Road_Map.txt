1. Развёртывание репозитория и базовой структуры

  Создать публичный репозиторий на GitHub.
  Подключить Render для хостинга.
  Подключить местную СУБД Postgres.
  Настроить базовую структуру проекта:
    /frontend (HTML/CSS/JS)
    /backend (Flask)
    /db (Postgres in Render)

2. Фронтенд (лендинг с тестируемыми элементами)

  Сделать простую страницу с:

    1. Формы (ручное, автотесты, API, безопасность)
    Логин / Регистрация (валидация, SQL-инъекции)

    Поиск с автодополнением (API-запросы, throttling)

    Профиль пользователя (редактирование, загрузка аватарки)

    2. Динамические списки (API, БД, нагрузка)
    Пагинация / Бесконечный скролл (кэширование, нагрузка)

    Сортировка и фильтрация (параметры запросов)

    Удаление/добавление элементов (CRUD, транзакции БД)

    3. Модальные окна и уведомления (ручное, автотесты)
    Toast-сообщения (таймауты, очередь)

    Подтверждение действий (например, удаление)

    Форма в модалке (фокус, accessibility)

    4. Состояния загрузки (ручное, автотесты, нагрузка)
    Скелетоны / Лоадеры (задержка API)

    Обработка ошибок (404, 500, нет сети)

    Оптимизированные запросы (дебаунс, отмена)

    5. Навигация (ручное, автотесты, безопасность)
    Роутинг (SPA переходы, защищённые маршруты)

    Хлебные крошки (история навигации)

    Якорные ссылки (скролл к элементам)

    6. Работа с API (перехват трафика, автотесты, нагрузка)
    Запросы с параметрами (Query/String, Headers)

    Кэширование данных (ETag, LocalStorage)

    Ошибки API (статусы 4xx/5xx, ретраи)

    7. Мини-функции для безопасности (ручное, автотесты)
    CSRF-токены в формах

    XSS-фильтрация (ввод скриптов в поля)

    Логирование действий (аудит изменений)

    8. Простые тесты БД (ручное, автотесты)
    Отображение актуальных данных (реактивность)

    Консистентность после действий (например, удаление)

    Оптимизация запросов (N+1 problem)

    9. Нагрузочные сценарии (нагрузка, API, БД)
    Множественные параллельные запросы

    Долгие операции (таймауты, отмена)

    Лимиты API (rate limiting)
    
    Добавить CSS/JS для визуальных эффектов.

3. Бэкенд (Flask)

  Настроить базовое API с CRUD для тестовых данных.
  Реализовать работу с БД.
  Добавить обработку форм с фронтенда.
  Настроить базовую JWT-аутентификацию (регистрация, логин, защищённые маршруты).

4. База данных

  Подключить БД в серверной части.
  Создать тестовую схему (таблицы пользователей, формы, файлы).
  Заполнить тестовыми данными для API.

5. HTTPS и работа с файлами

  Настроить self-signed сертификат для локальной разработки.
  Реализовать загрузку файлов на сервер.
  Реализовать скачивание файлов.

6. Логирование

  Настроить Python logging для запросов, ошибок и событий.
  Логи писать в отдельные файлы (logs/app.log, logs/errors.log).

7. Интеграция Swagger

  Подключить Swagger UI для документации API.

8. Интеграция CI/CD

  Настроить GitHub Actions для:
    автоматического прогона тестов при push;
    деплоя фронтенда на GitHub Pages.

9. Автотесты + нагрузочное тестирование

  Создать тестовые сценарии для API (Pytest).
  Протестировать UI с Selenium.
  Нагрузочные тесты в JMeter.

10. TMS и BTS

  Создать тест-кейсы и чек-листы (TestRail).
  Добавить имитацию баг-репортов (YouTrack).


