1. Развёртывание репозитория и базовой структуры

  Создать приватный/публичный репозиторий на GitHub.
  Подключить GitHub Pages для фронтенда.
  Настроить базовую структуру проекта:
    /frontend (HTML/CSS/JS)
    /backend (Flask)
    /db (MySQL, docker-compose.yml)
  Создать README с описанием проекта и целей.

2. Фронтенд (лендинг с тестируемыми элементами)

  Сделать простую страницу с:
    формой обратной связи (валидация email, обязательные поля);
    кнопками и ссылками;
    динамическим списком;
    модальным окном;
  Добавить CSS/JS для визуальных эффектов.
  Обеспечить адаптивность (мобильная/десктоп).

3. Бэкенд (Flask)

  Настроить базовое API с CRUD для тестовых данных.
  Реализовать работу с MySQL (SQLAlchemy).
  Добавить обработку форм с фронтенда.
  Настроить базовую JWT-аутентификацию (регистрация, логин, защищённые маршруты).

4. База данных (MySQL + Docker)

  Поднять MySQL в контейнере.
  Создать тестовую схему (таблицы пользователей, формы, файлы).
  Заполнить тестовыми данными для API.

5. HTTPS и работа с файлами

  Настроить self-signed сертификат для локальной разработки.
  Реализовать загрузку файлов на сервер.
  Реализовать скачивание файлов.

6. Логирование

  Настроить Python logging для запросов, ошибок и событий.
  Логи писать в отдельные файлы (logs/app.log, logs/errors.log).

7. Интеграция Swagger

  Подключить Swagger UI для документации API.

8. Интеграция CI/CD

  Настроить GitHub Actions для:
    автоматического прогона тестов при push;
    деплоя фронтенда на GitHub Pages.

9. Автотесты + нагрузочное тестирование

  Создать тестовые сценарии для API (Pytest).
  Протестировать UI с Selenium.
  Нагрузочные тесты в JMeter.

10. TMS и BTS

  Создать тест-кейсы и чек-листы (TestRail или аналог).
  Добавить имитацию баг-репортов (YouTrack).


