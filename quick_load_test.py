#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import requests
import time
import threading
from concurrent.futures import ThreadPoolExecutor
import statistics

def test_endpoint(url, method='GET', timeout=5):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    start_time = time.time()
    try:
        if method.upper() == 'GET':
            response = requests.get(url, timeout=timeout)
        else:
            response = requests.post(url, timeout=timeout)
        
        duration = (time.time() - start_time) * 1000
        return {
            'status_code': response.status_code,
            'duration_ms': duration,
            'success': response.status_code < 400,
            'size': len(response.content)
        }
    except Exception as e:
        return {
            'status_code': 0,
            'duration_ms': 0,
            'success': False,
            'error': str(e)
        }

def load_test(base_url, endpoint, concurrent_users=10, requests_per_user=5):
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    url = f"{base_url}{endpoint}"
    
    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {endpoint}")
    print(f"   URL: {url}")
    print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {concurrent_users}")
    print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {requests_per_user}")
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {concurrent_users * requests_per_user}")
    
    results = []
    
    def worker():
        user_results = []
        for _ in range(requests_per_user):
            result = test_endpoint(url)
            user_results.append(result)
        return user_results
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    with ThreadPoolExecutor(max_workers=concurrent_users) as executor:
        futures = [executor.submit(worker) for _ in range(concurrent_users)]
        
        for future in futures:
            try:
                user_results = future.result()
                results.extend(user_results)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
    
    return results

def analyze_results(endpoint, results):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not results:
        print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return
    
    successful = [r for r in results if r['success']]
    failed = [r for r in results if not r['success']]
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {endpoint}:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful)}/{len(results)} ({len(successful)/len(results)*100:.1f}%)")
    print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed)}")
    
    if successful:
        durations = [r['duration_ms'] for r in successful]
        sizes = [r['size'] for r in successful]
        
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:")
        print(f"      –°—Ä–µ–¥–Ω–µ–µ: {statistics.mean(durations):.2f} –º—Å")
        print(f"      –ú–µ–¥–∏–∞–Ω–∞: {statistics.median(durations):.2f} –º—Å")
        print(f"      –ú–∏–Ω–∏–º—É–º: {min(durations):.2f} –º—Å")
        print(f"      –ú–∞–∫—Å–∏–º—É–º: {max(durations):.2f} –º—Å")
        
        # RPS
        total_time = max(durations) / 1000
        rps = len(successful) / total_time if total_time > 0 else 0
        print(f"   üöÄ RPS: {rps:.2f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
        
        print(f"   üì¶ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {statistics.mean(sizes):.0f} –±–∞–π—Ç")
    
    if failed:
        print(f"   üîç –û—à–∏–±–∫–∏:")
        error_counts = {}
        for r in failed:
            error = r.get('error', f"HTTP {r.get('status_code', 'Unknown')}")
            error_counts[error] = error_counts.get(error, 0) + 1
        
        for error, count in error_counts.items():
            print(f"      {error}: {count} —Ä–∞–∑")

def main():
    base_url = "http://localhost:5000"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    endpoints = [
        '/',
        '/ping',
        '/register',
        '/login'
    ]
    
    print("üî• –ë–´–°–¢–†–û–ï –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 50)
    print(f"–ë–∞–∑–æ–≤—ã–π URL: {base_url}")
    print(f"–í—Ä–µ–º—è: {time.strftime('%H:%M:%S')}")
    print()
    
    all_results = {}
    
    for endpoint in endpoints:
        results = load_test(base_url, endpoint, concurrent_users=5, requests_per_user=10)
        all_results[endpoint] = results
        analyze_results(endpoint, results)
        print()
    
    # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
    print("üìà –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 50)
    
    total_requests = sum(len(results) for results in all_results.values())
    total_successful = sum(len([r for r in results if r['success']]) for results in all_results.values())
    all_durations = []
    
    for results in all_results.values():
        all_durations.extend([r['duration_ms'] for r in results if r['success']])
    
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {total_successful} ({total_successful/total_requests*100:.1f}%)")
    print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_requests - total_successful}")
    
    if all_durations:
        print(f"   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:")
        print(f"      –°—Ä–µ–¥–Ω–µ–µ: {statistics.mean(all_durations):.2f} –º—Å")
        print(f"      –ú–µ–¥–∏–∞–Ω–∞: {statistics.median(all_durations):.2f} –º—Å")
        print(f"      P95: {sorted(all_durations)[int(len(all_durations)*0.95)]:.2f} –º—Å")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == '__main__':
    main()
