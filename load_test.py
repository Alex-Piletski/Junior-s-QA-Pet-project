#!/usr/bin/env python3
"""
–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è QA Pet Project
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
"""

import requests
import time
import threading
import statistics
from concurrent.futures import ThreadPoolExecutor, as_completed
import json
import argparse
from datetime import datetime
import sys

class LoadTester:
    def __init__(self, base_url="http://localhost:5000"):
        self.base_url = base_url.rstrip('/')
        self.results = []
        self.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤
        self.test_configs = {
            'home_page': {
                'url': '/',
                'method': 'GET',
                'name': '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'
            },
            'ping': {
                'url': '/ping',
                'method': 'GET',
                'name': 'Ping endpoint'
            },
            'api_notes': {
                'url': '/api/notes',
                'method': 'GET',
                'name': 'API Notes (GET)'
            },
            'register': {
                'url': '/register',
                'method': 'GET',
                'name': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
            },
            'login': {
                'url': '/login',
                'method': 'GET',
                'name': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞'
            }
        }
    
    def make_request(self, test_name, url, method='GET', data=None, headers=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        full_url = f"{self.base_url}{url}"
        start_time = time.time()
        
        try:
            if method.upper() == 'GET':
                response = self.session.get(full_url, headers=headers, timeout=10)
            elif method.upper() == 'POST':
                response = self.session.post(full_url, json=data, headers=headers, timeout=10)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}")
            
            end_time = time.time()
            duration = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            return {
                'test_name': test_name,
                'url': url,
                'method': method,
                'status_code': response.status_code,
                'duration_ms': duration,
                'success': response.status_code < 400,
                'response_size': len(response.content),
                'timestamp': datetime.now().isoformat()
            }
            
        except requests.exceptions.Timeout:
            return {
                'test_name': test_name,
                'url': url,
                'method': method,
                'status_code': 0,
                'duration_ms': 10000,  # 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                'success': False,
                'response_size': 0,
                'error': 'Timeout',
                'timestamp': datetime.now().isoformat()
            }
        except Exception as e:
            return {
                'test_name': test_name,
                'url': url,
                'method': method,
                'status_code': 0,
                'duration_ms': 0,
                'success': False,
                'response_size': 0,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    def run_single_test(self, test_name, concurrent_users=1, requests_per_user=1):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        config = self.test_configs.get(test_name)
        if not config:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç: {test_name}")
            return []
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {config['name']}")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {concurrent_users}")
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {requests_per_user}")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {concurrent_users * requests_per_user}")
        
        results = []
        
        def user_worker():
            user_results = []
            for _ in range(requests_per_user):
                result = self.make_request(
                    test_name, 
                    config['url'], 
                    config['method']
                )
                user_results.append(result)
            return user_results
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        with ThreadPoolExecutor(max_workers=concurrent_users) as executor:
            futures = [executor.submit(user_worker) for _ in range(concurrent_users)]
            
            for future in as_completed(futures):
                try:
                    user_results = future.result()
                    results.extend(user_results)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
        
        return results
    
    def run_all_tests(self, concurrent_users=5, requests_per_user=10):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üî• –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
        print("=" * 50)
        print(f"–ë–∞–∑–æ–≤—ã–π URL: {self.base_url}")
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        all_results = {}
        
        for test_name in self.test_configs.keys():
            results = self.run_single_test(test_name, concurrent_users, requests_per_user)
            all_results[test_name] = results
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.analyze_results(test_name, results)
            print()
        
        # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
        self.analyze_all_results(all_results)
        
        return all_results
    
    def analyze_results(self, test_name, results):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        if not results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        config = self.test_configs[test_name]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        successful = [r for r in results if r['success']]
        failed = [r for r in results if not r['success']]
        
        if successful:
            durations = [r['duration_ms'] for r in successful]
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞: {config['name']}")
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(successful)}/{len(results)} ({len(successful)/len(results)*100:.1f}%)")
            print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(failed)}")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:")
            print(f"      –°—Ä–µ–¥–Ω–µ–µ: {statistics.mean(durations):.2f} –º—Å")
            print(f"      –ú–µ–¥–∏–∞–Ω–∞: {statistics.median(durations):.2f} –º—Å")
            print(f"      –ú–∏–Ω–∏–º—É–º: {min(durations):.2f} –º—Å")
            print(f"      –ú–∞–∫—Å–∏–º—É–º: {max(durations):.2f} –º—Å")
            print(f"      –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {statistics.stdev(durations):.2f} –º—Å")
            
            # RPS (–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)
            total_time = max(r['duration_ms'] for r in successful) / 1000
            rps = len(successful) / total_time if total_time > 0 else 0
            print(f"   üöÄ RPS (–∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫): {rps:.2f}")
            
            # –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
            avg_size = statistics.mean([r['response_size'] for r in successful])
            print(f"   üì¶ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {avg_size:.0f} –±–∞–π—Ç")
        else:
            print(f"‚ùå –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ—É–¥–∞—á–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∞: {config['name']}")
        
        if failed:
            print(f"   üîç –û—à–∏–±–∫–∏:")
            error_counts = {}
            for r in failed:
                error = r.get('error', f"HTTP {r.get('status_code', 'Unknown')}")
                error_counts[error] = error_counts.get(error, 0) + 1
            
            for error, count in error_counts.items():
                print(f"      {error}: {count} —Ä–∞–∑")
    
    def analyze_all_results(self, all_results):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
        print("üìà –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó")
        print("=" * 50)
        
        total_requests = 0
        total_successful = 0
        total_failed = 0
        all_durations = []
        
        for test_name, results in all_results.items():
            total_requests += len(results)
            successful = [r for r in results if r['success']]
            total_successful += len(successful)
            total_failed += len(results) - len(successful)
            all_durations.extend([r['duration_ms'] for r in successful])
        
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {total_successful} ({total_successful/total_requests*100:.1f}%)")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_failed} ({total_failed/total_requests*100:.1f}%)")
        
        if all_durations:
            print(f"   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:")
            print(f"      –°—Ä–µ–¥–Ω–µ–µ: {statistics.mean(all_durations):.2f} –º—Å")
            print(f"      –ú–µ–¥–∏–∞–Ω–∞: {statistics.median(all_durations):.2f} –º—Å")
            print(f"      –ú–∏–Ω–∏–º—É–º: {min(all_durations):.2f} –º—Å")
            print(f"      –ú–∞–∫—Å–∏–º—É–º: {max(all_durations):.2f} –º—Å")
            print(f"      P95: {sorted(all_durations)[int(len(all_durations)*0.95)]:.2f} –º—Å")
            print(f"      P99: {sorted(all_durations)[int(len(all_durations)*0.99)]:.2f} –º—Å")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if total_failed > 0:
            print(f"   ‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")
        
        if all_durations:
            avg_duration = statistics.mean(all_durations)
            if avg_duration > 1000:
                print(f"   üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (>1—Å) - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            elif avg_duration < 100:
                print(f"   ‚ö° –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (<100–º—Å)")
            else:
                print(f"   ‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_results(all_results)
    
    def save_results(self, all_results):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"load_test_results_{timestamp}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump({
                    'timestamp': datetime.now().isoformat(),
                    'base_url': self.base_url,
                    'results': all_results
                }, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def test_rate_limiting(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç rate limiting"""
        print("üö¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RATE LIMITING")
        print("=" * 50)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤
        rate_limit_tests = [
            ('/api/notes', 'GET', 50, 'API Notes Rate Limit'),
            ('/ping', 'GET', 200, 'Ping Rate Limit'),
            ('/register', 'GET', 10, 'Register Rate Limit')
        ]
        
        for url, method, limit, name in rate_limit_tests:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {name}")
            print(f"   URL: {url}")
            print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –ª–∏–º–∏—Ç: {limit} –∑–∞–ø—Ä–æ—Å–æ–≤")
            
            results = []
            for i in range(limit + 10):  # –î–µ–ª–∞–µ–º –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ–º –ª–∏–º–∏—Ç
                result = self.make_request(f"rate_limit_{url}", url, method)
                results.append(result)
                
                if result['status_code'] == 429:
                    print(f"   ‚úÖ Rate limit —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ #{i+1}")
                    break
                elif i == limit + 9:
                    print(f"   ‚ö†Ô∏è  Rate limit –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –ø–æ—Å–ª–µ {limit + 10} –∑–∞–ø—Ä–æ—Å–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful = [r for r in results if r['success']]
            rate_limited = [r for r in results if r['status_code'] == 429]
            
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print(f"      –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful)}")
            print(f"      Rate Limited: {len(rate_limited)}")
            print(f"      –û—à–∏–±–æ–∫: {len(results) - len(successful) - len(rate_limited)}")

def main():
    parser = argparse.ArgumentParser(description='–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QA Pet Project')
    parser.add_argument('--url', default='http://localhost:5000', help='–ë–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
    parser.add_argument('--users', type=int, default=5, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    parser.add_argument('--requests', type=int, default=10, help='–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    parser.add_argument('--test', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç')
    parser.add_argument('--rate-limit', action='store_true', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å rate limiting')
    
    args = parser.parse_args()
    
    tester = LoadTester(args.url)
    
    try:
        if args.rate_limit:
            tester.test_rate_limiting()
        elif args.test:
            results = tester.run_single_test(args.test, args.users, args.requests)
            tester.analyze_results(args.test, results)
        else:
            tester.run_all_tests(args.users, args.requests)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
